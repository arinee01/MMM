// === –°–ò–°–¢–ï–ú–ê –ü–†–û–ì–†–ï–°–°–ê –ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô ===
// 
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–û–ì–†–ï–°–°–ê:
// 
// ü™ô –°–ò–°–¢–ï–ú–ê –ú–û–ù–ï–¢:
// - –í–µ—Ö–∏ –≤ –ø—É—Ç—è—Ö: 8 –º–æ–Ω–µ—Ç –∫–∞–∂–¥—ã–µ 4 –¥–µ–π—Å—Ç–≤–∏—è
// - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—É—Ç–∏: 50 –º–æ–Ω–µ—Ç
// - –ù–æ–≤–∞—è —Ç–µ–º–∞: 8 –º–æ–Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏)
// - –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã: 8 –º–æ–Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏)
// - –ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã: 8 –º–æ–Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
// 
// üè∫ –°–û–°–£–î –ó–ù–ê–ù–ò–ô:
// - 40% –æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
// - 60% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç (–º–∞–∫—Å–∏–º—É–º 60)
// - –ë–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
// 
// üõ§Ô∏è –¢–†–ï–ë–û–í–ê–ù–ò–Ø –î–õ–Ø –ü–£–¢–ï–ô:
// - Chrono: 12 –¥–µ–π—Å—Ç–≤–∏–π
// - Magic: 15 –¥–µ–π—Å—Ç–≤–∏–π
// - Cross-cultural: 10 –¥–µ–π—Å—Ç–≤–∏–π
// - Museum Map: 8 –¥–µ–π—Å—Ç–≤–∏–π
// 
// ‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´:
// - –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
// - –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç
// - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
// - –õ–æ–≥–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Å—É–¥–∞ –∑–Ω–∞–Ω–∏–π

class ProgressSystem {
  constructor() {
    this.progress = this.loadProgress();
    this.initializeProgress();
    this.createProgressUI();
    this.setupEventListeners();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ localStorage
  loadProgress() {
    const saved = localStorage.getItem('museumProgress');
    if (saved) {
      return JSON.parse(saved);
    } else {
      // –ü–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ - –¥–∞–µ–º 12 –º–æ–Ω–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞
      return {
        coins: 12,
        vesselProgress: 0,
        maxVesselCapacity: 100,
        exploredPaths: {
          chrono: false,
          magic: false,
          crosscultural: false,
          museumMap: false
        },
        pathProgress: {
          chrono: 0,
          magic: 0,
          crosscultural: 0,
          museumMap: 0
        },
        exploredThemes: {},
        exploredQuestions: {},
        achievements: [],
        totalActions: 0,
        certificateEarned: false,
        userName: ''
      };
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ localStorage
  saveProgress() {
    localStorage.setItem('museumProgress', JSON.stringify(this.progress));
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  initializeProgress() {
    const currentPath = this.getCurrentPath();
    if (currentPath && !this.progress.pathProgress[currentPath]) {
      this.progress.pathProgress[currentPath] = 0;
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—É–¥ –∑–Ω–∞–Ω–∏–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.updateVesselProgress();
    
    console.log('Progress System Initialized:', {
      currentPath,
      totalActions: this.progress.totalActions,
      vesselProgress: this.progress.vesselProgress,
      exploredPaths: this.progress.exploredPaths
    });
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏
  getCurrentPath() {
    const path = window.location.pathname;
    if (path.includes('chrono')) return 'chrono';
    if (path.includes('magic')) return 'magic';
    if (path.includes('crosscultural')) return 'crosscultural';
    if (path.includes('museum-map')) return 'museumMap';
    return null;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ UI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  createProgressUI() {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressContainer = document.createElement('div');
    progressContainer.className = 'progress-container';
    progressContainer.innerHTML = `
      <div class="progress-header">
        <div class="progress-title">üèõÔ∏è Museum Progress</div>
        <div class="progress-close">√ó</div>
      </div>
      <div class="progress-content">
        <div class="progress-section">
          <div class="progress-label">üí∞ Coins Earned</div>
          <div class="progress-value coins-display">${this.progress.coins}</div>
        </div>
        <div class="progress-section">
          <div class="progress-label">üè∫ Knowledge Vessel</div>
          <div class="vessel-container">
            <div class="vessel-fill" style="height: ${(this.progress.vesselProgress / this.progress.maxVesselCapacity) * 100}%"></div>
            <div class="vessel-text">${this.progress.vesselProgress}/${this.progress.maxVesselCapacity}</div>
          </div>
        </div>
        <div class="progress-section">
          <div class="progress-label">Explored Paths</div>
          <div class="paths-grid">
            ${Object.entries(this.progress.exploredPaths).map(([path, explored]) => `
              <div class="path-item ${explored ? 'explored' : ''}" data-path="${path}">
                <span class="path-icon"></span>
                <div class="path-name">${path}</div>
                <div class="path-status">${explored ? 'Explored' : 'Not Explored'}</div>
              </div>
            `).join('')}
          </div>
        </div>
        ${this.progress.certificateEarned ? `
        <div class="progress-section">
          <div class="progress-label">üé≠ Certificate</div>
          <div class="certificate-info">
            <p>‚úÖ Certificate earned!</p>
            <p>Name: ${this.progress.userName}</p>
            <button class="btn-view-certificate" onclick="window.progressSystem.showCertificate('${this.progress.userName}')">üëÅÔ∏è View</button>
          </div>
        </div>
        ` : ''}
        <div class="progress-section">
          <div class="progress-label">üß™ Debug Tools</div>
          <button class="debug-btn" onclick="window.progressSystem.testProgress()">Test Progress</button>
          <button class="btn-generate-certificate" onclick="window.progressSystem.showCertificateModal()">üé≠ Get Certificate</button>
          <button class="debug-btn" onclick="window.progressSystem.resetProgress()">Reset Progress</button>
        </div>
      </div>
    `;

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressBtn = document.createElement('div');
    progressBtn.className = 'progress-btn';
    progressBtn.innerHTML = `
      <div class="progress-btn-icon">üèõÔ∏è</div>
      <div class="progress-btn-coins">${this.progress.coins}</div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.body.appendChild(progressContainer);
    document.body.appendChild(progressBtn);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    progressBtn.addEventListener('click', () => this.toggleProgressPanel());
    progressContainer.querySelector('.progress-close').addEventListener('click', () => this.toggleProgressPanel());
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  toggleProgressPanel() {
    const container = document.querySelector('.progress-container');
    container.classList.toggle('active');
  }

  // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç
  addCoins(amount, reason = '') {
    this.progress.coins += amount;
    this.progress.totalActions++;
    
    console.log('Coins added:', {
      amount,
      reason,
      totalCoins: this.progress.coins,
      totalActions: this.progress.totalActions
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    this.updateCoinsDisplay();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.showNotification(`+${amount} coins earned! ${reason}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—É–¥ –∑–Ω–∞–Ω–∏–π –ø—Ä–∏ –∫–∞–∂–¥–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
    this.updateVesselProgress();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    this.saveProgress();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    this.checkAchievements();
  }
  
  // –°–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç:
  // - –ó–∞ –≤–µ—Ö–∏ –≤ –ø—É—Ç—è—Ö: 8 –º–æ–Ω–µ—Ç –∫–∞–∂–¥—ã–µ 4 –¥–µ–π—Å—Ç–≤–∏—è
  // - –ó–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—É—Ç–∏: 50 –º–æ–Ω–µ—Ç
  // - –ó–∞ –Ω–æ–≤—É—é —Ç–µ–º—É: 8 –º–æ–Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏)
  // - –ó–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã: 8 –º–æ–Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏)
  // - –ó–∞ –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã: 8 –º–æ–Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  checkAchievements() {
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–≤—É—é –º–æ–Ω–µ—Ç—É
    if (this.progress.coins === 1 && !this.progress.achievements.some(a => a.title === 'üí∞ First coin earned!')) {
      this.addAchievement('üí∞ First coin earned!', 'Earned your first coin!');
    }
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ 10 –º–æ–Ω–µ—Ç
    if (this.progress.coins >= 10 && !this.progress.achievements.some(a => a.title === 'üí∞ Coin collector!')) {
      this.addAchievement('üí∞ Coin collector!', 'Collected 10 coins!');
    }
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ 50 –º–æ–Ω–µ—Ç
    if (this.progress.coins >= 50 && !this.progress.achievements.some(a => a.title === 'üí∞ Wealthy explorer!')) {
      this.addAchievement('üí∞ Wealthy explorer!', 'Collected 50 coins!');
    }
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if (this.progress.totalActions === 1 && !this.progress.achievements.some(a => a.title === 'üéØ First step taken!')) {
      this.addAchievement('üéØ First step taken!', 'Took your first action!');
    }
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ 10 –¥–µ–π—Å—Ç–≤–∏–π
    if (this.progress.totalActions >= 10 && !this.progress.achievements.some(a => a.title === 'üéØ Active explorer!')) {
      this.addAchievement('üéØ Active explorer!', 'Took 10 actions!');
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—É—Ç–∏
  updatePathProgress(path, action) {
    if (!this.progress.pathProgress[path]) {
      this.progress.pathProgress[path] = 0;
    }
    
    this.progress.pathProgress[path]++;
    
    console.log('Path Progress Update:', {
      path,
      action,
      currentProgress: this.progress.pathProgress[path],
      requiredActions: this.getPathRequiredActions(path)
    });
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã —Ç–æ–ª—å–∫–æ –∑–∞ –∑–Ω–∞—á–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–∫–∞–∂–¥—ã–µ 4-5 –¥–µ–π—Å—Ç–≤–∏–π)
    if (this.progress.pathProgress[path] % 4 === 0) {
      this.addCoins(8, `Milestone in ${path}`); // –£–º–µ–Ω—å—à–∏–ª —Å 10 –¥–æ 8
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –ø—É—Ç—å
    this.checkPathCompletion(path);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—É–¥ –∑–Ω–∞–Ω–∏–π
    this.updateVesselProgress();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    this.saveProgress();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—É—Ç–∏
  checkPathCompletion(path) {
    const pathActions = this.getPathRequiredActions(path);
    const currentProgress = this.progress.pathProgress[path];
    
    if (currentProgress >= pathActions && !this.progress.exploredPaths[path]) {
      this.progress.exploredPaths[path] = true;
      this.addCoins(50, `Path ${path} completed!`);
      this.addAchievement(`Completed ${path} path!`);
      this.showNotification(`üéâ Path ${path} fully explored! +50 coins bonus!`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º UI
      this.updatePathsDisplay();
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—É—Ç–∏
  getPathRequiredActions(path) {
    const requirements = {
      chrono: 12,      // 12 –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏ (—É–º–µ–Ω—å—à–∏–ª —Å 15)
      magic: 15,       // 15 –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—É—Ç–∏ –º–∞–≥–∏–∏ (—É–º–µ–Ω—å—à–∏–ª —Å 20)
      crosscultural: 10, // 10 –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫—Ä–æ—Å—Å-–∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –ø—É—Ç–∏ (—É–º–µ–Ω—å—à–∏–ª —Å 12)
      museumMap: 8     // 8 –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞—Ä—Ç—ã –º—É–∑–µ—è (–æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –µ—Å—Ç—å)
    };
    return requirements[path] || 10;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–æ—Å—É–¥–∞ –∑–Ω–∞–Ω–∏–π
  updateVesselProgress() {
    const totalPaths = Object.keys(this.progress.exploredPaths).length;
    const completedPaths = Object.values(this.progress.exploredPaths).filter(Boolean).length;
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Å—É–¥–∞ —Ç–µ–ø–µ—Ä—å –±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω
    const pathProgress = (completedPaths / totalPaths) * 40; // 40% –æ—Ç –ø—É—Ç–µ–π (—É–≤–µ–ª–∏—á–∏–ª —Å 30%)
    const coinProgress = Math.min(this.progress.coins * 0.4, 60); // 60% –æ—Ç –º–æ–Ω–µ—Ç (—É–º–µ–Ω—å—à–∏–ª —Å 70%)
    
    this.progress.vesselProgress = Math.min(
      this.progress.maxVesselCapacity,
      Math.round(pathProgress + coinProgress)
    );
    
    console.log('Vessel Progress Update:', {
      completedPaths,
      totalPaths,
      pathProgress: Math.round(pathProgress),
      coinProgress: Math.round(coinProgress),
      totalProgress: this.progress.vesselProgress
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—É–¥–∞
    this.updateVesselDisplay();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–∏–ª—Å—è –ª–∏ —Å–æ—Å—É–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é
    if (this.progress.vesselProgress >= this.progress.maxVesselCapacity && !this.progress.certificateEarned) {
      this.showCertificateModal();
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  addAchievement(achievement, description = '') {
    const achievementObj = {
      title: achievement,
      description: description || achievement
    };
    
    this.progress.achievements.push(achievementObj);
    if (this.progress.achievements.length > 10) {
      this.progress.achievements.shift(); // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    this.updateAchievementsDisplay();
    
    console.log('Achievement added:', achievementObj);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–Ω–µ—Ç
  updateCoinsDisplay() {
    const coinsDisplay = document.querySelector('.coins-display');
    const progressBtnCoins = document.querySelector('.progress-btn-coins');
    
    if (coinsDisplay) coinsDisplay.textContent = this.progress.coins;
    if (progressBtnCoins) progressBtnCoins.textContent = this.progress.coins;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—É–¥–∞
  updateVesselDisplay() {
    const vesselFill = document.querySelector('.vessel-fill');
    const vesselText = document.querySelector('.vessel-text');
    
    if (vesselFill) {
      vesselFill.style.height = `${(this.progress.vesselProgress / this.progress.maxVesselCapacity) * 100}%`;
    }
    if (vesselText) {
      vesselText.textContent = `${this.progress.vesselProgress}/${this.progress.maxVesselCapacity}`;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Ç–µ–π
  updatePathsDisplay() {
    const pathItems = document.querySelectorAll('.path-item');
    pathItems.forEach(item => {
      const path = item.dataset.path;
      if (this.progress.exploredPaths[path]) {
        item.classList.add('explored');
        item.querySelector('.path-status').textContent = 'Explored';
      }
    });
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  updateAchievementsDisplay() {
    const achievementsList = document.querySelector('.achievements-list');
    if (achievementsList) {
      achievementsList.innerHTML = this.progress.achievements.slice(-3).map(achievement => {
        if (typeof achievement === 'string') {
          return `<div class="achievement-item">${achievement}</div>`;
        } else {
          return `<div class="achievement-item">
            <span class="achievement-icon">${achievement.title.split(' ')[0]}</span>
            <div class="achievement-info">
              <div class="achievement-title">${achievement.title}</div>
              <div class="achievement-description">${achievement.description}</div>
            </div>
          </div>`;
        }
      }).join('');
    }
  }

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  showNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'progress-notification';
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => notification.classList.add('show'), 100);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
  setupEventListeners() {
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º
    document.addEventListener('click', (e) => {
      const target = e.target;
      
      // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      if (target.matches('.nav-btn, .arrow-button, .path-btn')) {
        this.updatePathProgress(this.getCurrentPath(), 'navigation');
      }
      
      // –ö–Ω–æ–ø–∫–∏ —Ç–µ–º (–º–æ–Ω–µ—Ç—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —Å–º–µ–Ω–µ —Ç–µ–º—ã)
      if (target.matches('.theme-panel button')) {
        const themeKey = 'theme_' + target.textContent.toLowerCase().replace(/[^a-z0-9]/g, '');
        if (!this.progress.exploredThemes) this.progress.exploredThemes = {};
        if (!this.progress.exploredThemes[themeKey]) {
          this.progress.exploredThemes[themeKey] = true;
          this.addCoins(8, 'New theme discovered'); // –£–º–µ–Ω—å—à–∏–ª —Å 15 –¥–æ 8
        }
      }
      
      // –ö–Ω–æ–ø–∫–∏ –∞–º—É–ª–µ—Ç–æ–≤
      if (target.matches('.amulet-card, .amulet-tab')) {
        this.updatePathProgress(this.getCurrentPath(), 'amulet_interaction');
      }
      
      // –ö–∞—Ä—Ç—ã —Ç–∞—Ä–æ
      if (target.matches('.tarot-card, .tarot-toggle-btn')) {
        this.updatePathProgress(this.getCurrentPath(), 'tarot_interaction');
      }
      
      // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º (–º–æ–Ω–µ—Ç—ã —Ç–æ–ª—å–∫–æ –∑–∞ –ø–µ—Ä–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã)
      if (target.matches('.hero-question-btn, .hero-helper-input')) {
        const questionKey = 'question_' + (target.textContent || 'input').toLowerCase().replace(/[^a-z0-9]/g, '').substring(0, 10);
        if (!this.progress.exploredQuestions) this.progress.exploredQuestions = {};
        if (!this.progress.exploredQuestions[questionKey]) {
          this.progress.exploredQuestions[questionKey] = true;
          this.addCoins(8, 'New question explored'); // –£–º–µ–Ω—å—à–∏–ª —Å 15 –¥–æ 8
        }
      }
      
      // –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø—É—Ç–∏
      if (target.matches('.artifact-item, .text-controls button')) {
        this.updatePathProgress('chrono', 'artifact_interaction');
      }
    });

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          const theme = document.body.className.match(/theme-\w+/)?.[0];
          if (theme) {
            // –ú–æ–Ω–µ—Ç—ã –∑–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏
            const themeKey = 'visited_' + theme;
            if (!this.progress.exploredThemes) this.progress.exploredThemes = {};
            if (!this.progress.exploredThemes[themeKey]) {
              this.progress.exploredThemes[themeKey] = true;
              this.addCoins(8, 'Theme exploration'); // –£–º–µ–Ω—å—à–∏–ª —Å 15 –¥–æ 8
            }
          }
        }
      });
    });

    observer.observe(document.body, {
      attributes: true,
      attributeFilter: ['class']
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  getProgressStats() {
    return {
      totalCoins: this.progress.coins,
      vesselPercentage: (this.progress.vesselProgress / this.progress.maxVesselCapacity) * 100,
      exploredPaths: Object.values(this.progress.exploredPaths).filter(Boolean).length,
      totalPaths: Object.keys(this.progress.exploredPaths).length,
      totalActions: this.progress.totalActions
    };
  }

  // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  resetProgress() {
    this.progress = {
      coins: 0,
      vesselProgress: 0,
      maxVesselCapacity: 100,
      exploredPaths: {
        chrono: false,
        magic: false,
        crosscultural: false,
        museumMap: false
      },
      pathProgress: {
        chrono: 0,
        magic: 0,
        crosscultural: 0,
        museumMap: 0
      },
      exploredThemes: {},
      exploredQuestions: {},
      achievements: [],
      totalActions: 0,
      certificateEarned: false,
      userName: ''
    };
    
    this.saveProgress();
    this.updateCoinsDisplay();
    this.updateVesselDisplay();
    this.updatePathsDisplay();
    this.updateAchievementsDisplay();
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  testProgress() {
    console.log('Testing Progress System...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã
    this.addCoins(25, 'Test milestone');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—É—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    for (let i = 0; i < 6; i++) {
      this.updatePathProgress('chrono', 'test_action');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = this.getProgressStats();
    console.log('Current Progress Stats:', stats);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—É–¥ –∑–Ω–∞–Ω–∏–π
    this.updateVesselProgress();
    
    alert(`Progress Test Complete!\nCoins: ${this.progress.coins}\nVessel: ${this.progress.vesselProgress}/100\nActions: ${this.progress.totalActions}\n\nUpdated system: More balanced coin distribution and vessel filling!`);
  }
  
  // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
  showCertificateModal() {
    console.log('Opening certificate modal...');
    
    const modal = document.createElement('div');
    modal.className = 'certificate-modal';
    modal.innerHTML = `
      <div class="certificate-content">
        <div class="certificate-header">
          <h2>üéâ Congratulations! üéâ</h2>
          <p>You have successfully completed the online exhibition!</p>
        </div>
        <div class="certificate-form">
          <label for="userName">Enter your name for the certificate:</label>
          <input type="text" id="userName" name="userName" placeholder="Your name" maxlength="50" autocomplete="off">
          <div class="certificate-buttons">
            <button class="btn-generate" id="generateBtn">Generate Certificate</button>
            <button class="btn-close" id="closeBtn">Close</button>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(() => {
      const input = modal.querySelector('#userName');
      if (input) {
        input.focus();
        input.select();
        console.log('Input focused and selected');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        input.addEventListener('input', (e) => {
          console.log('Input value changed:', e.target.value);
        });
        
        input.addEventListener('focus', () => {
          console.log('Input focused');
        });
        
        input.addEventListener('blur', () => {
          console.log('Input blurred');
        });
        
        input.addEventListener('click', () => {
          console.log('Input clicked');
        });
        
      } else {
        console.error('Input not found');
      }
    }, 200);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    setTimeout(() => {
      const generateBtn = modal.querySelector('#generateBtn');
      const closeBtn = modal.querySelector('#closeBtn');
      
      if (generateBtn) {
        generateBtn.addEventListener('click', (e) => {
          console.log('Generate button clicked');
          e.preventDefault();
          this.generateCertificate();
        });
        
        generateBtn.addEventListener('mouseenter', () => {
          console.log('Generate button hovered');
        });
        
        console.log('Generate button event listeners added');
      } else {
        console.error('Generate button not found');
      }
      
      if (closeBtn) {
        closeBtn.addEventListener('click', (e) => {
          console.log('Close button clicked');
          e.preventDefault();
          this.closeCertificateModal();
        });
        
        console.log('Close button event listeners added');
      } else {
        console.error('Close button event listeners added');
      }
    }, 300);
    
    console.log('Certificate modal opened');
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
  closeCertificateModal() {
    const modal = document.querySelector('.certificate-modal');
    if (modal) {
      modal.remove();
    }
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
  generateCertificate() {
    console.log('generateCertificate called');
    
    const userNameInput = document.getElementById('userName');
    if (!userNameInput) {
      console.error('userName input not found');
      return;
    }
    
    const userName = userNameInput.value.trim();
    console.log('User name:', userName);
    
    if (!userName) {
      alert('Please enter your name!');
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.progress.userName = userName;
    this.progress.certificateEarned = true;
    this.saveProgress();
    
    console.log('Progress saved, closing modal...');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    this.closeCertificateModal();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    this.showCertificate(userName);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    this.addAchievement('Master Explorer', 'Certificate of completion earned!');
    
    console.log('Certificate generated for:', userName);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    this.showNotification('üéâ Certificate generated successfully!');
  }
  
  // –ü–æ–∫–∞–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
  showCertificate(userName) {
    const certificate = document.createElement('div');
    certificate.className = 'certificate-display';
    certificate.innerHTML = `
      <div class="certificate-paper">
        <div class="certificate-border">
          <div class="certificate-header">
            <h1>CERTIFICATE</h1>
            <h2>OF COMPLETION</h2>
          </div>
          <div class="certificate-body">
            <p>This is to certify that</p>
            <div class="user-name">${userName}</div>
            <p>has successfully completed the online exhibition "Mysticism & Magic", exploring all exhibits and themes with dedication and curiosity.</p>
            <div class="certificate-stats">
              <p>Coins Earned: ${this.progress.coins}</p>
              <p>Paths Explored: ${Object.values(this.progress.exploredPaths).filter(Boolean).length}/${Object.keys(this.progress.exploredPaths).length}</p>
              <p>Date: ${new Date().toLocaleDateString('en-US')}</p>
            </div>
          </div>
          <div class="certificate-footer">
            <p>Congratulations on your successful completion!</p>
          </div>
        </div>
      </div>
      <div class="certificate-controls">
        <div class="certificate-hint">
          <p>Tip: Right-click on the certificate and "Save image as..." for manual download</p>
        </div>
        <button class="btn-download" onclick="window.progressSystem.downloadCertificate()">Download</button>
        <button class="btn-close" onclick="window.progressSystem.closeCertificate()">Close</button>
      </div>
    `;
    
    document.body.appendChild(certificate);
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
  closeCertificate() {
    const certificate = document.querySelector('.certificate-display');
    if (certificate) {
      certificate.remove();
    }
  }
  
  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
  downloadCertificate() {
    console.log('Downloading certificate...');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    const tempContainer = document.createElement('div');
    tempContainer.className = 'certificate-download-container';
    tempContainer.style.cssText = `
      position: fixed;
      top: -9999px;
      left: -9999px;
      width: 1200px;
      height: 800px;
      background: #000;
      z-index: -1;
      overflow: hidden;
    `;
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    const certificateContent = document.querySelector('.certificate-paper').cloneNode(true);
    tempContainer.appendChild(certificateContent);
    document.body.appendChild(tempContainer);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º html2canvas –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (typeof html2canvas !== 'undefined') {
      html2canvas(tempContainer, {
        backgroundColor: '#000',
        scale: 2,
        width: 1200,
        height: 800,
        useCORS: true,
        allowTaint: true
      }).then(canvas => {
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const link = document.createElement('a');
        link.download = `certificate_${this.progress.userName.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.png`;
        link.href = canvas.toDataURL('image/png');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        link.click();
        
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        document.body.removeChild(tempContainer);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        this.showNotification('Certificate downloaded successfully!');
        
        console.log('Certificate downloaded as PNG');
      }).catch(error => {
        console.error('Error generating certificate image:', error);
        this.showNotification('‚ùå Error downloading certificate');
        document.body.removeChild(tempContainer);
      });
    } else {
      // Fallback: –µ—Å–ª–∏ html2canvas –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
      this.showNotification('üì± Right-click on certificate and "Save image as..."');
      document.body.removeChild(tempContainer);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
window.progressSystem = new ProgressSystem(); 